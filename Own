class Solution {
    public int findMin(int[] nums) {
        int l = 0;
        int target=0;
        int r = nums.length - 1;
/* OWN       if( r == 0 )
            return nums[0];        
        while( l <= r ){
            int mid = ( l + r )/2;
            if( nums[l] < nums[r])
                return nums[l];
            else if( nums[r] < nums[l] && nums[r] < nums[r-1])
                return nums[r];
            else if( nums[mid] < nums[mid-1] && nums[mid] < nums[mid+1]){
                return nums[mid];
            }                
            else if( nums[l] < nums[mid] ){
                target = nums[l];
                if( nums[r] < target )
                    l = mid + 1;
                else
                    r = mid - 1;          
            }
            else{
                target = nums[mid+1];
                if( target > nums[mid-1])
                    r = mid - 1;
                else
                    l = mid + 1;                
            }                
        }
        return 0;
    }
} OWN */
        //another solution
        if( nums[l] <= nums[r] )
            //array is not rotated at all
            return nums[0];
        
        while( l <= r ){
            int mid = ( l + r )/2;
            if( nums[mid] > nums[mid+1] )
                return nums[mid+1];
            else if( nums[mid] < nums[mid - 1] )
                return nums[mid];
            else if( nums[l] <= nums[mid] )
                l = mid + 1;
            else if( nums[mid] <= nums[r] )
                r = mid - 1;
        }
        return -1;
    }
}
// in rotated array the smallest element will always be less than its previous one or the smallest element will always be present next to the largest element

// so the mid calculated is checked whether it is less then its previous or not
// if less then it is answer and vice versa

// if both these cases not true then we go for normal target finding in rotated array process

//https://www.youtube.com/watch?v=Kcj2NGnuSNg
